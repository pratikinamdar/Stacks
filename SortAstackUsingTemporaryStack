// This coed sorts a stack in ascending order using another temporary stack

#include <iostream>
#include<stack>
using namespace std;


stack<int> sortStack(stack<int> &s)
{    int tempo; int count;
stack<int> temp;
    if(!s.empty())
    {
        temp.push(s.top());
        s.pop();
    }
    else
    {
        cout<<"Stack empty \n";
       
    }
    while(!s.empty())
    {
        if(s.top()>=temp.top())
        {
         temp.push(s.top());
         s.pop();
        }
        else if(s.top()<temp.top())
        {
            count =0; tempo = s.top(); s.pop();
            while(!temp.empty() && temp.top()>tempo)
            {
                s.push(temp.top());
                temp.pop();
                count++;
            }
            temp.push(tempo);
            while(count>0)
            {
                temp.push(s.top());
                s.pop();
                count--;
            }
            
        }
    
       
    }
    return temp; 
}

int main()
{
    stack<int> s;
    
    s.push(66);
    s.push(55);
    s.push(44);
    s.push(33);
    s.push(22);
    s.push(11); 

    s.push(11);
    s.push(22);
    s.push(33);
    s.push(44);
    s.push(55);
    s.push(66); 
    s = sortStack(s);
 while(!s.empty())
 {
    cout<<s.top()<<"\t";
   
     s.pop();
 }
  return 0;
}
